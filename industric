#include <avr/io.h>
#include <inttypes.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <time.h>
#include <avr/pgmspace.h>
#include <avr/eeprom.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/wdt.h>
#include <avr/sfr_defs.h>
#include "u8g.h"



volatile unsigned char temp_value_1;
volatile uint16_t temp_value_2;
volatile uint16_t adc_value_1;
volatile uint16_t adc_value_2;
volatile uint16_t Horizontal;
volatile uint16_t Vertical;
volatile uint16_t tuta;
volatile uint16_t adc_interrupt_counter = 0;
volatile uint16_t adc_value;
volatile uint8_t welcome_screen_flag = 0;
volatile uint16_t last_data_received=0;
volatile uint8_t new_data_flag = 0;
volatile uint8_t buttonState = 0;
 

#define SETBIT(ADDR,BIT) (ADDR|=(1<<BIT))
#define CLEARBIT(ADDR,BIT) (ADDR &= ~(1<<BIT))
#include <avr/pgmspace.h>
void draw(void);
void draw_1(void);
void draw_distance(void);
void draw_adress(void);
void usart_init(void);
void test(void);

void clearOLED();
void ADC_enable(void);

u8g_t u8g;
void WelcomeScreen(void);

static int Terminal (char data, FILE *stream);
static FILE mystream = FDEV_SETUP_STREAM(Terminal, NULL, _FDEV_SETUP_WRITE); 
volatile unsigned char data_in[32];
unsigned char command_in[8];
volatile unsigned char data_count;
volatile unsigned char command_ready;

char mybuf[32];
#define TRUE 1
#define FALSE 0

int main(void)
{
	
sei();

usart_init();
ADC_enable();
stdout = &mystream;


DDRB |= (1<<7);    // saknas i init-funktionen, se kommentar nedan [*]
u8g_InitSPI(&u8g, &u8g_dev_ssd1306_128x64_hw_spi, PN(1, 7), PN(1, 5), PN(1, 4), PN(1, 2), U8G_PIN_NONE/*PN(1,1)*/);


 	WelcomeScreen();
	 _delay_ms(3000);
 	
// 	welcome_screen_flag = 1;
// 
// 	
//

/*clearOLED();*/
	
    while (1) 
    {
	test();
	_delay_ms(500);
	
	
		if (last_data_received <=5){
			last_data_received++;
		}
		
		
		draw_distance();
	  
	

		 

		  

 	  }
	  

}




void draw_distance(void)
	{
	
		u8g_FirstPage(&u8g);
		do
		{
				u8g_SetColorIndex(&u8g,1);
				sprintf(mybuf, "D: %s ", data_in);
				u8g_SetFont(&u8g, u8g_font_9x15);
				u8g_DrawStr(&u8g, 0, 10, mybuf);
				
			 
				if (last_data_received >= 5) {
					u8g_DrawStr(&u8g, 0, 32, "Offline");
					
					} else {
						
					u8g_DrawStr(&u8g, 0, 32, "Online");
				}
			
		} while ( u8g_NextPage(&u8g) );
		
		}

void WelcomeScreen(void){
	
	{
		u8g_FirstPage(&u8g);
		do
		{
		draw();
		} while ( u8g_NextPage(&u8g) );
			
			
		
		}
	
}
void draw(void){
	//u8g_SetColorIndex(&u8g, 1);
	u8g_SetFont(&u8g, u8g_font_osb18);
	u8g_DrawStr(&u8g, 0, 32, "Hej du!");
	//u8g_SetColorIndex(&u8g, 0);
}
	


//sprintf // FÃ¶r att skriva ut en string

//------------------------------- USART------------------------------------------------
void usart_init(void){
	SETBIT(DDRD,1);
	SETBIT(PORTD,1);

	UBRR0 = 12;
	//UCSR0A = 0x00;
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1<<RXCIE0 ) ; // Turn on the transmission and reception circuitry
	
	UCSR0C = 0;
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) ;
	
	
}

static int Terminal (char data, FILE *stream){
	
//uint8_t counter = 0;
	 while(bit_is_clear(UCSR0A,UDRE0)){
             
		/*	 if (counter++ > 1000)
			 {
				 return 
			 }*/

	 }
	UDR0 = data;
	return 0;
 }
 
 ISR(USART0_RX_vect){

	 // get data from usart in register
	 data_in[data_count] = UDR0;
	 last_data_received=0;
	 // end of line!
	 if (data_in[data_count] == '\r') {
		 command_ready = TRUE;
		 data_count = 0;
		

		 } else {
		 data_count++;
		 
		
	 }
 }

//--------------------------------------------------------------
 

  void clearOLED(){
	  
	  u8g_FirstPage(&u8g);
	  
	  do {
		  u8g_SetColorIndex(&u8g,0);
		  u8g_DrawBox(&u8g, 0, 16, 10 , 15); // x,y position samt hur stor 10x15 
		 
		  u8g_SetColorIndex(&u8g,0);
		  
	  } while( u8g_NextPage(&u8g) );
	
	 }

void ADC_enable(void){
	ADCSRA = (1 << ADEN); // ADC Enable, no clk div
	ADMUX = (1 << REFS1) | (1<< REFS0);
}
	 
	 /*ISR(WDT_vect)*/
void test (void){
	 
		 
		 
		 SETBIT(DDRD,6);
		 SETBIT(PORTD,6);

		 
		 adc_value = ADC;
		 
		 if (adc_interrupt_counter == 0){
			 
       		 _delay_ms(10);
      		 Horizontal = adc_value;
			 adc_interrupt_counter++;
       		 ADMUX = (0<<MUX0) | (0<< MUX1) | (1<<REFS1) | (1<<REFS0);
       		 ADCSRA |= (1<<ADSC); // Start ADC again
				
				
			 printf("x%d\n", Horizontal);
			
		 }
		 
		 else if (adc_interrupt_counter==1){
			
       		 
      		 Vertical = adc_value;
			      adc_interrupt_counter=0;
       		 ADMUX = (1<<MUX0) | (0<<MUX1) | (1<<REFS1) | (1<<REFS0);
      		 ADCSRA |= (1<<ADSC); // Start ADC again
			
			   
			printf("y%d\n", Vertical);
			
		 }
		
			 
// 		 
// 		else if (adc_interrupt_counter==2){	
// 			
//  			tuta = ADC;
// 			 ADMUX = (0<<MUX0) | (1<< MUX1) | (1<<REFS1) | (1<<REFS0);
//  			 ADCSRA |= (1<<ADSC); // Start ADC again
// 			 
// 			 
//  			 if (PINA== 0b11111011 ) {
// 				  adc_interrupt_counter=0;
//  				 
//  				 printf("TUT\n");
// 				 
// 			 //}
// 		
        	//CLEARBIT(DDRD,6);
			CLEARBIT(PORTD,6);
        	 }
	 
//        
//         
        
